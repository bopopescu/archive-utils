#Locator
LocatorDAO.getPod=select * from pod where id = ?
LocatorDAO.getActivePods=select * from pod where status = ?
LocatorDAO.getActiveSignupPods=select * from pod where status = ? and signup = ?
LocatorDAO.assignUID=insert into user_id (email) values (?)
LocatorDAO.assignUIDToPod=insert into user_lookup (uid, pid, email, normalized_email, created) values (?, ?, ?, ?, ?)
LocatorDAO.findUIDAndPodForEmail=select uid, pid from user_lookup where email = ?
LocatorDAO.findUIDAndPodForNormalizedEmail=select uid, pid from user_lookup where normalized_email = ?
LocatorDAO.findUser=select pid from user_lookup where uid = ?
LocatorDAO.findUserPods=select uid, pid from user_lookup where uid in (**);
LocatorDAO.findUserEmail=select email from user_lookup where uid = ?
LocatorDAO.deleteTokenable= delete from tokenable where creator_uid = ?
LocatorDAO.deleteUserLookup=delete from user_lookup where uid = ?
LocatorDAO.deleteUserId=delete from user_id where id = ?
LocatorDAO.updateEmailInUserId=update user_id set email = ? where id = ?
LocatorDAO.updateEmailInUserLookup=update user_lookup set email = ?, normalized_email = ? where uid = ?

TokenDAO.createToken=insert into tokenable (token, creator_uid, reference_id, reference_type, date_expires) values (?, ?, ?, ?, ?)
TokenDAO.getTokenById=select * from tokenable where id = ?
TokenDAO.getTokenByTokenString=select * from tokenable where token = ?
TokenDAO.expireToken=update tokenable set date_expires = now() where id = ?
TokenDAO.getTokenByUidAndType=select * from tokenable where creator_uid = ? and reference_type = ? limit 1;

# Pod - User
PodDAO.createUser=insert into user (id, email, status, password, created) values (?, ?, ?, ?, ?)
PodDAO.createUserRole=insert into user_role (uid, role_id) values (?, ?)
PodDAO.createUserProfile=insert into user_profile (uid, tshirt_size, cellphone, birthdate, gender, first_name, last_name, timezone, language_code, country_code, registration_postal_code) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
PodDAO.createUserAddress=insert into user_address (uid, address_label, address_line_1, address_line_2, city, state, country_code, postal_code, is_default_billing, is_default_shipping) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
PodDAO.createUserMetric=insert into user_metric (uid, num_accepted_invites, ptz_balance) values (?, ?, ?)

PodDAO.deleteUserMetric=delete from user_metric where uid = ?
PodDAO.deleteUserAddress=delete from user_address where uid = ?
PodDAO.deleteUserProfile=delete from user_profile where uid = ?
PodDAO.deleteUserRole=delete from user_role where uid = ?
PodDAO.deleteUserLog=delete from user_log where uid = ?
PodDAO.deleteInvitationForUser=delete from invitation where sender_uid = ?
PodDAO.deleteDailyPostAnswerForUser=delete from daily_post_answer where uid = ?
PodDAO.deleteHallwayPostForUser=delete from hallway_post where uid = ?
PodDAO.deletePtzTransactionForUser=delete from ptz_transaction where uid = ?
PodDAO.deleteUser=delete from user where id = ?

PodDAO.getUserRole=select * from user_role where uid = ?
PodDAO.getUserMetric=select * from user_metric where uid = ?
PodDAO.getUserProfile=select * from user_profile, user where user_profile.uid = ? and user_profile.uid = user.id and user.status != 0
PodDAO.getUserAddresses=select * from user_address where uid = ?
PodDAO.getCredential=select id,email,password,status from user where id = ?
PodDAO.updateUserRole=update user_role set role_id=? where uid=?
PodDAO.updateUserProfile=update user_profile set tshirt_size=?, cellphone=?, birthdate=?, gender=?, first_name=?, last_name=?, timezone=?, language_code=?, country_code=?, registration_postal_code=?, profile_image_id=?, profile_image_url=? where uid = ?
PodDAO.updateUserAddress=update user_address set address_label=?, address_line_1=?, address_line_2=?, city=?, state=?, country_code=?, postal_code=?, is_default_billing=?, is_default_shipping=? where id = ? and uid = ?
PodDAO.updatePassword=update user set password = ? where id = ?
PodDAO.updateStatus=update user set status = ? where id = ?
PodDAO.createNewEmail=insert into user_log (uid, tokenid, new_email, last_updated) values (?, ?, ?, now());
PodDAO.getNewEmail=select new_email from user_log where tokenid = ?
PodDAO.updateOldEmailUserLog=update user_log set old_email = ? where tokenid = ?
PodDAO.updateEmailUser=update user set email = ? where id = ?

PodDAO.searchUserLogForEmail=select distinct uid from user_log where old_email = ?
PodDAO.getUserLogHistory=select * from user_log where uid = ?

PodDAO.getPrivacySettings=select * from user_privacy_settings where uid = ?
PodDAO.addPrivacySetting=insert into user_privacy_settings (uid, privacy_setting_key, access_level) values(?, ?, ?)
PodDAO.updatePrivacySetting=update user_privacy_settings set access_level = ? where uid = ? and privacy_setting_key = ?
PodDAO.clearPrivacySettings=delete from user_privacy_settings where uid = ?

PodDAO.getEmailSettings=select * from user_email_settings where uid = ?
PodDAO.createEmailSettings=insert into user_email_settings (uid, email_template, flag) values(?, ?, ?)
PodDAO.removeEmailSettings=delete from user_email_settings where uid = ? 

PodDAO.getUserAboutStatements=select * from user_about_statement where uid = ? order by id desc limit 3
PodDAO.addUserAboutStatement=insert into user_about_statement (uid, disp_state, statement_prefix_id, statement) values (?, ?, ?, ?)
PodDAO.updateUserAboutStatement=update user_about_statement set disp_state = ?, statement_prefix_id = ?, statement = ? where uid = ? and id = ?
PodDAO.removeUserAboutStatement=delete from user_about_statement where uid = ? and id = ?

PodDAO.createUserRoleHistory=insert into user_role_history (uid,old_role_id,new_role_id,price,payer_email,customer_name,transaction_date,payment_provider_id,transaction_id) values (?,?,?,?,?,?,?,?,?);
PodDAO.getUserRoleHistoryForTransaction=select * from user_role_history where transaction_id=? and payment_provider_id=?
PodDAO.getUserRoleHistory=select * from user_role_history where uid=?
PodDAO.expireUserRoleHistory=update user_role_history set expiration_date=now() where uid=? and expiration_date is null;
PodDAO.warnUserRoleHistory=update user_role_history set warn_date=now() where uid=? and  warn_date is null and expiration_date is null;
PodDAO.getUserRolesToExpire=select uid, new_role_id as role_id from user_role_history where expiration_date is null and effective_date <  date_sub(curdate(), interval 1 month) limit 100;
PodDAO.getUserRolesToWarn=select uid, new_role_id as role_id from user_role_history where expiration_date is null and warn_date is null and effective_date <  date_add(date_sub(curdate(), interval 1 month),interval 7 day) limit 100;

PodDAO.updateLoginTimestamp=update user_metric set last_login=now() where uid=?
PodDAO.getUserPtzTransactions=select * from ptz_transaction where uid = ? order by id desc limit ?,?;

# Pod - Invitation
PodDAO.createInviteForEmail=insert into invitation (invitation_type_id, sender_uid, recipient, date_sent, is_friend_request, is_sent, custom_message, sender_ip_address) values (?, ?, ?, ?, ?, ?, ?, ?)
PodDAO.updateInvitationAsSent=update invitation set is_sent=1 where id = ?
PodDAO.getInvitationDetails=select sender_uid, invitation_type_id, recipient from invitation where id = ?
PodDAO.deleteInvite=delete from invitation where id = ?
PodDAO.updateInviteDateClicked=update invitation set date_clicked=now() where id = ?
PodDAO.updateInviteDateSent=update invitation set date_sent=now() where sender_uid = ? and recipient = ?
PodDAO.getInviteeDetails=select recipient_uid,recipient, date_sent, date_clicked, date_accepted from invitation where sender_uid = ? order by date_sent desc 
PodDAO.getInviteId=select id from invitation where sender_uid = ? and recipient = ?
PodDAO.getMessageForInviteId=select custom_message from invitation where id = ?
PodDAO.getNumSentInvites=select count(*) from invitation where sender_uid = ?
PodDAO.getNumClickedInvites=select count(*) from invitation where sender_uid = ? and date_clicked IS NOT NULL
PodDAO.getNumAcceptedInvites=select num_accepted_invites from user_metric where uid = ?

# Pod - Invitation (updateInvitationAtRegistration)
PodDAO.updateInvitationAtRegistration=update invitation set recipient_uid=?, date_accepted=now(), recipient_ip_address=? where id = ?
PodDAO.updateAcceptedInviteCount=update user_metric set num_accepted_invites = num_accepted_invites + 1 where uid = ?
PodDAO.getAcceptedInviteCount=select num_accepted_invites from user_metric where uid = ?

# Pod - Daily
PodDAO.getOlderDailyAnswers=select * from daily_post_answer where uid = ? and daily_post_id <= ? order by daily_post_id desc limit ?
PodDAO.getNewerDailyAnswers=select * from daily_post_answer where uid = ? and daily_post_id >= ? order by daily_post_id desc limit ?
PodDAO.getMonthDailyAnswers=select * from daily_post_answer where uid = ? and daily_post_id in (**) order by daily_post_id desc 
PodDAO.answerDaily=insert into daily_post_answer (uid, daily_post_id, daily_post_option_id, answer, date_answered) values (?, ?, ?, ?, ?)

# Pod - Hallway
PodDAO.getOlderHallwayPosts=select * from hallway_post hp join hallway_event_type het on hp.event_type_id = het.id where uid = ? and date_posted < ? order by date_posted desc limit ?
PodDAO.createHallwayPost=insert into hallway_post (uid, event_type_id, event_ref_id, event_values, date_posted) values (?, ?, ?, ?, ?)

# Pod - Ptz
PodDAO.createPtzTransaction=insert into ptz_transaction (uid, ptz_value, ptz_type_id, event_ref_id, ptz_active, date_transaction) values (?, ?, ?, ?, ?, ?)
PodDAO.updateUserPtzBalance=update user_metric set ptz_balance = ptz_balance + ? where uid = ?
PodDAO.updateAndCheckUserPtzBalance=update user_metric set ptz_balance = ptz_balance + ?, risked_ptz_balance = risked_ptz_balance + ? where uid = ? and ptz_balance + ? >= 0
PodDAO.updateUserPendingPtzBalance=update user_metric set pending_ptz_balance = pending_ptz_balance + ? where uid = ?
PodDAO.updateAndCheckUserPendingPtzBalance=update user_metric set pending_ptz_balance = pending_ptz_balance + ? where uid = ? and pending_ptz_balance + ? >= 0

PodDAO.clearStalePtzCount=delete from TMP_STALE_PTZ;
PodDAO.clearUsedPtzCount=delete from TMP_USED_PTZ;
PodDAO.countStalePtz=insert into TMP_STALE_PTZ (UID,PTZ) select uid, sum(ptz_value) as ptz from ptz_transaction WHERE ptz_value > 0 and date_transaction < subdate(now(), interval 3 month) group by uid;
PodDAO.countUsedPtz=insert into TMP_USED_PTZ (UID,PTZ) select uid, sum(ptz_value) as ptz from ptz_transaction WHERE ptz_value < 0 group by uid;
PodDAO.countExpPtz=select tmp_stale_ptz.uid,  tmp_stale_ptz.ptz + tmp_used_ptz.ptz from tmp_stale_ptz left join tmp_used_ptz on tmp_stale_ptz.uid=tmp_used_ptz.uid;

# Pod - Media
PodDAO.getImageUploadCount=select image_upload_count from user_metric where uid=?
PodDAO.updateImageUploadCount=update user_metric set image_upload_count=? where uid=?

# Pod - Content
PodDAO.videoWasConsumed=insert into content_video_consumed (uid, content_id, date_consumed) values (?, ?, ?)
PodDAO.getVideosConsumed=select content_id, watch_count from content_video_consumed  where uid = ?;
PodDAO.videoWasConsumedAgain=update content_video_consumed set watch_count=watch_count+1, date_consumed=now()  where uid = ? and content_id = ?;

# Pod - Decal
PodDAO.getUserDecalList=select uid, decal_id, display_status, created from user_decal where uid=?
PodDAO.addUserDecal=insert into user_decal (uid, decal_id, display_status, created) values(?, ?, ?, now())
PodDAO.updateUserDecal=update user_decal set display_status=? where uid=? and decal_id=?
PodDAO.getUserDecalEvents=select * from user_decal_events where uid=?
PodDAO.createUserDecalEvent=insert into user_decal_events values(?,?,?,?,?,?,?)
PodDAO.updateUserDecalEvent=update user_decal_events set clicked_thru_date=?, clicked_thru_ptz=?, shopped_thru_date=?, shopped_thru_ptz=? where uid=? and decal_id=? and user_decal_viewer_uid=?
PodDAO.createDecalClicked=insert into decals_clicked values(?,?,?)
PodDAO.getDecalsClicked=select decal_id from decals_clicked where viewer_uid=?

TemplateDAO.getTemplate=select * from template where name = ?
TemplateDAO.getTemplateNames=select name from template
TemplateDAO.createTemplate=insert into template (name, content, last_updated) values(?,?,?);
TemplateDAO.updateTemplate=update template set content=?, last_updated=? where name=?;
TemplateDAO.deleteTemplate=delete from template where name=?;

ReferenceDataDAO.getAllTimeZones=select * from timezone

#DailiesDAO.getDailies=select dp.*, dpo.* from daily_post dp left join daily_post_option dpo on dp.id = dpo.post_id order by dp.id desc, dpo.id desc
DailiesDAO.getDailies=select dp.*, dpo.* from daily_post dp left join daily_post_option dpo on dp.id = dpo.post_id order by dp.date_post desc, dpo.id desc
DailiesDAO.createDailyPost=insert into daily_post (date_post, banner_image, daily_post_type_id, ptz_value, expose_statistics) values (?, ?, ?, ?, ?);
DailiesDAO.createDailyPostOption=insert into daily_post_option (post_id, caption, ptz_value) values (?, ?, ?);
DailiesDAO.deleteDailyPost=delete from daily_post where id = ?
DailiesDAO.deleteDailyPostOptions=delete from daily_post_option where post_id = ?
DailiesDAO.deleteDailyStatistic=delete from daily_post_statistic where daily_post_id = ?
DailiesDAO.updateDailyStatistic=update daily_post_statistic set votes = votes + ? where daily_post_id = ? and daily_post_option_id = ?
DailiesDAO.createNewDailyStatistic=insert into daily_post_statistic (daily_post_id, daily_post_option_id, votes) values (?, ?, ?)
DailiesDAO.getDailyStatistic=select * from daily_post_statistic where daily_post_id = ? and  daily_post_option_id = ?
DailiesDAO.updateDailyPost=update daily_post set date_post=?, banner_image=?, daily_post_type_id=?, ptz_value=?, expose_statistics=? where id=?

HallwayDAO.getHallwayLockerzMessages=select * from hallway_lockerz_message hlm join hallway_event_type het on hlm.event_type_id = het.id where date_posted < now() order by date_posted desc
HallwayDAO.getAllHallwayLockerzMessages=select * from hallway_lockerz_message hlm join hallway_event_type het on hlm.event_type_id = het.id order by date_posted desc
HallwayDAO.getAllHallwayLockerzMessagesPage=select * from hallway_lockerz_message hlm join hallway_event_type het on hlm.event_type_id = het.id order by date_posted desc limit ?,?
HallwayDAO.createLockerzMessage=insert into hallway_lockerz_message (event_type_id, message, date_posted, is_required) values (?, ?, ?, ?)
HallwayDAO.deleteHallwayLockerzMessage=delete from hallway_lockerz_message where id = ?
HallwayDAO.updateHallwayLockerzMessage=update hallway_lockerz_message set event_type_id=?, message=?, date_posted=?, is_required=? where id=?

# Invitation
InvitationDAO.getOptoutId=select id from optout_email where email = ?
InvitationDAO.getBlockedDomainId=select id from banned_email_domain where domain = ?
InvitationDAO.addToOptout=insert into optout_email (email, ip_address, date_submitted) values (?, ?, now())

# Ptz
PtzTypeDAO.getPtzTypes=select id, type, title, role_id, ptz_value, ptz_value_factor, last_updated, ptz_subtype, use_supplied_ptz_value from ptz_type
PtzTypeDAO.addPtzType=insert into ptz_type (type, title, role_id, ptz_value, ptz_value_factor, ptz_subtype, use_supplied_ptz_value) values (?, ?, ?, ?, ?, ?, ?)
PtzTypeDAO.updatePtzType=update ptz_type set type=?, title=?, role_id=?, ptz_value=?, ptz_value_factor=?, ptz_subtype=?, use_supplied_ptz_value=? where id=?
PtzTypeDAO.getPtzType=select id, type, title, role_id, ptz_value, ptz_value_factor, last_updated, ptz_subtype, use_supplied_ptz_value from ptz_type where id=?
PtzTypeDAO.deletePtzType=delete from ptz_type where id=?

# Content
ContentDAO.getAllVideos=select * from content_video_catalog
ContentDAO.addVideoToCatalog=insert into content_video_catalog (release_id, date_effective, ptz_value, provider_id, third_party_id, duration_seconds) values (?, ?, ?, ?, ?, ?)
ContentDAO.addVideoMetadata=insert into content_video_metadata (content_id, media_id, title, description, approved, remote_updated) values (?, ?, ?, ?, ?, ?)
ContentDAO.updateVideoMetadata=update content_video_metadata set media_id = ?, title = ?, description = ?, approved = ?, remote_updated = ? where content_id = ? and remote_updated < ?
ContentDAO.getVideoMetadataForContentId=select * from content_video_metadata where content_id = ?
ContentDAO.getVideoByReleaseId=select * from content_video_catalog where release_id = ?
ContentDAO.getVideoByThirdPartyId=select * from content_video_catalog where provider_id = ? and third_party_id = ?
ContentDAO.getVideoProviderById=select * from content_providers where id = ?
ContentDAO.getVideoProviderByAccessKey=select * from content_providers where access_key = ?
ContentDAO.deleteVideo=delete from content_video_catalog where id = ?
ContentDAO.deleteVideoMetadata=delete from content_video_metadata where content_id = ?
ContentDAO.getVideoPtzDefaults=select * from content_video_ptz_defaults order by min_duration
ContentDAO.updateVideo=update content_video_catalog set release_id = ?, provider_id = ?, third_party_id = ?, date_effective = ?, date_expire = ?, ptz_value = ?, duration_seconds = ? where id = ?

# Service Location Service
ServiceLocationDAO.getSiteConfig=select nw.*,sc.*,n.* from node n join service_class sc on n.service_class_id = sc.id join network nw on sc.network_id = nw.id where n.enabled = 1 order by nw.id, sc.id;
ServiceLocationDAO.createNode=insert into node (hostname,ip,name,proxy_string,scalr_farm,service_class_id) values (?,?,?,?,?,(select id from service_class where name=? and network_id=?))
ServiceLocationDAO.updateNode=update node set hostname = ?, ip = ?, name = ?, proxy_string = ?, scalr_farm = ? where id=?
ServiceLocationDAO.deleteNode=delete from node where id = ?

# Service Location Service 2
ServiceLocationService2DAO.createService=insert into service_location (ip, port, name, network, admin, enabled) values (?, ?, ?, ?, ?,?)
ServiceLocationService2DAO.updateService=update service_location set ip=?, port=?, name=?, network=?, admin=?, enabled=? where id=?
ServiceLocationService2DAO.deleteService=delete from service_location where id=?
ServiceLocationService2DAO.getAllServices=select * from service_location;

# Forum
Forum.createForumMessage=insert into forum (group_id,parent_id,uid,user_name,message,date_posted) values (?,?,?,?,?,now())
Forum.getForumPost=select * from forum where id=? 
Forum.getForumPosts=select * from forum where group_id=? and parent_id=0 order by date_posted desc limit ?,? 
Forum.getForumComments=select * from forum where parent_id=? order by date_posted desc limit ?,? 
Forum.blockForumMessage=update forum set active=0 where id=?
Forum.unblockForumMessage=update forum set active=1 where id=?
Forum.reportAbuse=update forum set abuse=abuse+1 where id=?
Forum.logLike=update forum set like_count=like_count+1 where id=?
Forum.logDislike=update forum set dislike_count=dislike_count+1 where id=?

# Social Service
FriendListDAO.createFriend=insert into friend_list (uid, friend_uid, status, created) values (?, ?, ?, ?)
FriendListDAO.updateFriendStatus=update friend_list set status = ? where uid = ? and friend_uid = ?
FriendListDAO.removeFriend=delete from friend_list where uid = ? and friend_uid = ?
FriendListDAO.getFriendList=select * from friend_list where uid = ?
FriendListDAO.addDisabledUid=insert into disabled_user_ids values(?)
FriendListDAO.getDisabledUids=select uid from disabled_user_ids
FriendListDAO.removeDisabledUids=delete from disabled_user_ids where uid=?

FriendRequestDAO.createFriendRequest=insert into friend_request (inviter_uid, receiver_uid, message, created) values (?, ?, ?, ?)
FriendRequestDAO.removeFriendRequest=delete from friend_request where inviter_uid = ? and receiver_uid = ?
FriendRequestDAO.getFriendRequests=select * from friend_request where receiver_uid = ? 
FriendRequestDAO.getUserSocialNetwork = select * from user_social_network where uid = ? and network_id = ?
FriendRequestDAO.addUserSocialNetwork = insert into user_social_network (uid, network_id, network_user_id, oauth_token) values (?,?,?,?)
FriendRequestDAO.removeUserSocialNetwork = delete from user_social_network where uid = ? and network_id = ?
FriendRequestDAO.getSocialNetworkList=select * from user_social_network where network_id=? and network_user_id in (**)

# Media Service
MediaDAO.getUserMediaById=select um.*,id.* from user_media um left join image_data id on um.id = id.media_id where um.id = ?
MediaDAO.addUserMedia=insert into user_media (uid, media_type_id, flags, status_id, location, created_date) values (?, ?, ?, ?, ?, now())
MediaDAO.updateUserMedia=update user_media set uid=?, media_type_id=?, flags=?, status_id=?, location=? where id=? 
MediaDAO.addImageData=insert into image_data (media_id, width, height, mime_type) values (?, ?, ?, ?)
MediaDAO.updateflagCount=update user_media set flags = ? where id = ?
MediaDAO.removeUserMedia=delete from user_media where id = ?
MediaDAO.removeImageData=delete from image_data where id = ?

# Decal Service
DecalDAO.createDecalMaster=insert into decal_master(decal_type_category_id, name, decal_image_url, decal_detail_image_url, decal_click_url, status, created) values (?,?,?,?,?,?,?)
DecalDAO.updateDecal=update decal_master set name=?,decal_type_category_id=?,decal_image_url=?,decal_detail_image_url=?,decal_click_url=?,status=? where id = ?
DecalDAO.updateDecalStatus=update decal_master set status = ? where id = ?
DecalDAO.getDecalTypeCategoryId=select id from decal_type_category where decal_type=? and category=?
DecalDAO.getDecalById=select d.id, d.name, d.decal_image_url, d.decal_detail_image_url, d.decal_click_url, dtc.decal_type, dtc.category from decal_master d inner join  decal_type_category dtc on d.decal_type_category_id = dtc.id  where d.id=?
DecalDAO.getDecalByTypeAndCategory=select d.id, d.name, d.decal_image_url, d.decal_detail_image_url, d.decal_click_url, dtc.decal_type, dtc.category from decal_master d inner join  decal_type_category dtc on d.decal_type_category_id = dtc.id  where dtc.decal_type=? and dtc.category=?;
DecalDAO.getTypeCategoriesForDecals=select dtc.decal_type, dtc.category from decal_type_category dtc, decal_master d where dtc.id = d.decal_type_category_id and d.id in (**)
DecalDAO.getDecalTypes=select distinct(decal_type) from decal_type_category
DecalDAO.getDecalList=select d.id, d.name, d.decal_image_url, d.decal_detail_image_url, d.decal_click_url, dtc.decal_type, dtc.category from decal_master d inner join decal_type_category dtc on d.decal_type_category_id = dtc.id where d.id in (**)
DecalDAO.getDecalIdForReleaseId=select decal_id from content_decal_lookup where release_id=?
DecalDAO.addReleaseToDecalMapping=insert into content_decal_lookup (release_id, decal_id) values(?,?)
DecalDAO.getDecalsForSkus=select d.id, d.name, d.decal_image_url, d.decal_detail_image_url, d.decal_click_url, dtc.decal_type, dtc.category from decal_master d inner join decal_type_category dtc on d.decal_type_category_id = dtc.id where d.decal_click_url like ?

# Decal bundles
DecalBundleDAO.getBundleTypes=select * from decal_bundle_types
DecalBundleDAO.getBundleListPage=select * from decal_bundle_info order by bundle_id desc limit ?,?
DecalBundleDAO.getMetaData=select * from decal_bundle_meta_info where bundle_id=?
DecalBundleDAO.getBundlesOfType=select * from decal_bundle_info where bundle_id in (select bundle_id from decal_bundle_type_map where bundle_type=?)
DecalBundleDAO.getBundleById=select decal_id from decal_bundle_map where bundle_id=?
DecalBundleDAO.getBundlesByIds=select distinct decal_id from decal_bundle_map where bundle_id in (**)
DecalBundleDAO.getBundlesWithMeta=select * from decal_bundle_info where bundle_id in (select bundle_id from decal_bundle_meta_info where name=? and info=?)
DecalBundleDAO.addBundleType=insert into decal_bundle_types (type_name) values (?)
DecalBundleDAO.addTypeToBundle=insert into decal_bundle_type_map (bundle_id, bundle_type) values (?,?)
DecalBundleDAO.removeTypeFromBundle=delete from decal_bundle_type_map where bundle_id=? and bundle_type=?

DecalBundleDAO.createBundleInfo=insert into decal_bundle_info (name, created) values (?,now())
DecalBundleDAO.addMetaInfo=insert into decal_bundle_meta_info (bundle_id, name, info) values **
DecalBundleDAO.addDecalIds=insert into decal_bundle_map (bundle_id, decal_id) values **
DecalBundleDAO.deactivateBundleById=update decal_bundle_info set active=0 where bundle_id=?
DecalBundleDAO.deactivateBundleByBusinessId=update decal_bundle_info set active=0 where bundle_business_id=?

# User Service
UserDAO.getAboutStatementPrefixes=select * from about_statement_prefix
UserDAO.addAboutStatementPrefix=insert into about_statement_prefix (prefix) values (?)
UserDAO.removeAboutStatementPrefix=delete from about_statement_prefix where id = ?
UserDAO.clearAboutStatementPrefixes=delete from about_statement_prefix;

# Auction Proxy auction mapping
AuctionProxyDAO.registerAuction=insert into auction_cluster (cluster_id, creation_date) values (?, now())
AuctionProxyDAO.getClusterForAuction=select cluster_id from auction_cluster where auction_id=?
AuctionProxyDAO.removeAuction=delete from auction_cluster where auction_id=?
# Auction Proxy clusters
AuctionProxyDAO.addCluster=insert into cluster_map (id, cluster_type, proxy_string, status) values (?,?,?,?)
AuctionProxyDAO.updateClusterStatus=update cluster_map set status=? where id=? and cluster_type=?
AuctionProxyDAO.updateClusterProxyString=update cluster_map set proxy_string=? where id=? and cluster_type=?
AuctionProxyDAO.removeCluster=delete from cluster_map where id=? and cluster_type=?
AuctionProxyDAO.getClusters=select * from cluster_map
AuctionProxyDAO.getCluster=select * from cluster_map where id=? and cluster_type=?

# Auction
BidDAO.placeBid=insert into open_auction_bid (uid, auction_id, bid_amount, current_bid_amount, timestamp, status) values (?, ?, ?, ?, ?, ?)
BidDAO.getHighestBids=select * from open_auction_bid where auction_id = ? and ( status = ? or status = ? ) order by bid_amount desc limit ?,?
BidDAO.getBidderSet=select uid from open_auction_bid where auction_id = ?

AuctionDAO.getAuction=select * from auction where id=?
AuctionDAO.getAuctionsWithStatus=select * from auction where status=? order by end_timestamp desc
AuctionDAO.getAuctionCounts=select * from user_stats where uid=?
AuctionDAO.createStatRow=insert into user_stats(uid, unclaimed_wins, claimed_wins, losses) values (?,?,?,0)
AuctionDAO.addWin=update user_stats set unclaimed_wins=unclaimed_wins+1 where uid=? 
AuctionDAO.addClaim=update user_stats set unclaimed_wins=unclaimed_wins-1 claimed_wins=claimed_wins+1 where uid=? 
AuctionDAO.getUserAuctionsOpen=select id from auction where status=? and id in (select distinct auction_id from open_auction_bid where uid=?);
AuctionDAO.getUserAuctionsOfStatus=select id from auction where status=? and id in (select distinct auction_id from open_auction_bid where uid=?);
AuctionDAO.getUserWonAuctionsPage=select * from auction where winner_uid=? order by status desc limit ?,?
AuctionDAO.getUserWonAuctions=select * from auction where winner_uid=? order by status desc
AuctionDAO.getUserWonAuctionsWithStatusCount=select count(*) from auction where winner_uid=? and status=?

# Auction Admin
AuctionDAO.createAuction=insert into auction(id, creation_date, start_timestamp, end_timestamp, title, description, image_url, sku, opening_price, reserve_price, minimum_bid_increment, bid_increment, buy_now_price, type, status, tier, dollar_value, delivery_type) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
AuctionDAO.updateAuction=update auction set creation_date=?, start_timestamp=?, end_timestamp=?, title=?, description=?, image_url=?, sku=?, opening_price=?, reserve_price=?, minimum_bid_increment=?, bid_increment=?, buy_now_price=?, type=?, status=?, winner_uid=?, winning_bid=?, ship_address_id=?, ip_address=?, tier=?, dollar_value=?, delivery_type=? where id=?
AuctionDAO.deleteAuction=delete from auction where id=?
AuctionDAO.getAuctions=select * from auction order by end_timestamp desc limit ?,?
AuctionDAO.getAllAuctions=select * from auction order by end_timestamp desc
AuctionDAO.getAuctionsOfStatusPage=select * from auction where status=? order by end_timestamp desc limit ?,?
AuctionDAO.getAuctionsOfStatusAndTierPage=select * from auction where status=? and tier=? order by end_timestamp desc limit ?,?
AuctionDAO.getAuctionsOfStatus=select * from auction where status=? order by end_timestamp desc
AuctionDAO.getAllAuctionsCount=select count(*) as total from auction;
AuctionDAO.getAllAuctionsWithStatusCount=select count(*) as total from auction where status=?
AuctionDAO.setStatus=update auction set status=? where id=?

# International Auction Payments
InternationalPaymentDAO.createInternationalPayment=insert into international_payments (uid, auction_id, payment_method, payment_account, update_date, creation_date) values (?,?,?,?,now(),now())
InternationalPaymentDAO.getUserRecords=select * from international_payments where uid=?
InternationalPaymentDAO.getAuctionRecord=select * from international_payments where auction_id=?
InternationalPaymentDAO.setTransactionId=update international_payments set transaction_id=?, transaction_date=now(), update_date=now() where auction_id=?
InternationalPaymentDAO.getPayments=select * from international_payments where auction_id in (**)

# User Auction View 
UserAuctionViewDAO.updateDeclaredAuctionOne=update user_auction_view set status = ? where auction_id = ? and uid = ?
UserAuctionViewDAO.updateDeclaredAuctionMany=update user_auction_view set status = ? where auction_id = ?
UserAuctionViewDAO.addAuction=insert into user_auction_view (uid, auction_id, status) values (?, ?, ?)
UserAuctionViewDAO.getUserAuctionsByStatus=select auction_id from user_auction_view where uid = ? and status = ?
UserAuctionViewDAO.setDeclaredTimestamp=update user_auction_view set won_timestamp = ? where auction_id = ? and uid = ?
UserAuctionViewDAO.getRecentWonAuctions=select auction_id, won_timestamp from user_auction_view where uid = ? and won_timestamp is not null
UserAuctionViewDAO.declareRedemptionWinner=insert into user_auction_view (uid, auction_id, status, won_timestamp) values (?, ?, ?, ?)

## Commerce Services

# Payment Service
PaymentDAO.createPayment=insert into payment (incoming, tracker_id, uid, email, order_id, title, description, amount, status, payment_provider_id, creation_date, update_date) values (?,?,?,?,?,?,?,?,?,?,now(),now())
PaymentDAO.setToken=update payment set token=?, update_date=now() where id=?
PaymentDAO.setTransactionId=update payment set transaction_id=?, update_date=now() where id=?
PaymentDAO.getPayment=select * from payment where id=?
PaymentDAO.getPaymentFromToken=select * from payment where token=?
PaymentDAO.getPayemntFromTransaction=select * from payment where transaction_id=?
PaymentDAO.updatePayment=update payment set uid=?, email=?, order_id=?, description=?, amount=?, status=?, payment_provider_id=?, update_date=now() where id=?
PaymentDAO.updatePaymentStatus=update payment set status=?, update_date=now() where id=?
PaymentDAO.incrAuthorizations=update payment set authorizations=authorizations+1, update_date=now() where id=?
PaymentDAO.setPayerId=update payment set payer_id=?, update_date=now() where id=?
PaymentDAO.setProviderId=update payment set payment_provider_id=?, update_date=now() where id=?
PaymentDAO.setFailureReason=update payment set failure_reason=?, status=?, update_date=now() where id=?

# Payment Items
PaymentItemDAO.createPaymentItemEntry=insert into payment_item (payment_id, sku, quantity) values (?,?,?)
PaymentItemDAO.getPaymentItemEntry=select * from payment_item where payment_id=?=======

# Audit Service
AuditServiceDAO.addEntryToAuditLog=insert into audit_log (uid, change_type, change_value, reason, description, lockerz_employee) values (?, ?, ?, ?, ?, ?)
AuditServiceDAO.getAllAuditLogs=select * from audit_log
AuditServiceDAO.getAuditLogByUser=select * from audit_log where uid = ?
AuditServiceDAO.getAuditLogByMeg=select * from audit_log where lockerz_employee = ?

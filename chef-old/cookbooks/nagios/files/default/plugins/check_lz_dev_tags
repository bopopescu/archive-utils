#! /usr/bin/perl 


use strict;
use warnings;

use Getopt::Long;
use Net::DNS;
use LWP::UserAgent;
use vars qw($opt_V $opt_h $opt_u $opt_p $opt_S);
use vars qw($PROGNAME $VERSION $TIMEOUT);
use lib "/usr/lib/nagios/plugins";
use utils qw($TIMEOUT %ERRORS &print_revision &support &usage);



$PROGNAME = "check_lz_commerce_tags";
$VERSION = '0.01';
$TIMEOUT = '30';

my $domain = 'dev.lockerz';
	
sub print_usage () {
	print "Usage: $PROGNAME <config> <farm> <role> -u <path> [ -S ] [ -p <port> ]\n";
	
}

sub print_help () {
	print "$PROGNAME ", '$Revision: ', "$VERSION", ' $', "\n";

	print_usage();
	print "
-u, --url=PATH
   Path to file to check for Tag information
-S, --SSL
   Check via SSL
-p, --port=INTEGER
   Port that the http daemon is running on <host> (Default: 80)
-V, --version
   Print version information
-h, --help
   Print usage information.
";
}

sub enumerate_hosts($){
	my $hostname = shift;
	my $res = Net::DNS::Resolver->new;
	my $query = $res->search($hostname);

	my $response = {};

	if($query){
		foreach my $rr ($query->answer){
			next unless $rr->type eq 'A';
			$response->{$rr->address}++;
		}
	}else{
		print "Query failed for $hostname: ", $res->errorstring, "\n";
		exit $ERRORS{"UNKNOWN"};
	}
	return($response);
}

# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub {
	print "Somthing is Taking a Long Time, Increase Your TIMEOUT (Currently Set At $TIMEOUT Seconds)\n";
	exit $ERRORS{"UNKNOWN"};
};


Getopt::Long::Configure('bundling');
GetOptions(
	"V"   => \$opt_V,  "version"    => \$opt_V,
	"h"   => \$opt_h,  "help"       => \$opt_h,
	"p=i" => \$opt_p,  "port=i"     => \$opt_p,
	"u=s" => \$opt_u,  "url=s"	=> \$opt_u,
	"S"   => \$opt_S,  "SSL"	=> \$opt_S,
);

my $config = shift || print_usage && exit $ERRORS{'UNKNOWN'};
my $farm = shift || print_usage && exit $ERRORS{'UNKNOWN'};
my $role = shift || print_usage && exit $ERRORS{'UNKNOWN'};

if ($opt_V) {
	print "$PROGNAME ", '$Revision: ', "$VERSION", ' $', "\n";
	exit $ERRORS{'OK'};
}

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}


($opt_p) || ($opt_p = 80);

if(!defined $opt_u){
	print "No URL defined.\n";
	print_usage;
	exit $ERRORS{"UNKNOWN"};
}

## OK, time to enumerate the hosts.
my $hostname = 'int-' . $role . '.' . $farm . '.' . $domain;

my $ips = enumerate_hosts($hostname);

## Retrieve and store Tag information from each host.
my $ua = LWP::UserAgent->new;
$ua->timeout(10);
my %responses;
my $errors = 0;

foreach my $i (keys %$ips){
	my $resp = $ua->get("http://$i/$opt_u");
	if($resp->is_success){
		my $page = $resp->decoded_content;
		#$page =~ m/Tag:\s+(.*)/;
		#my $tag = $1;
		my $tag = $page;
		chomp($tag);
		$responses{$tag}++;
	}else{
		$errors++;
	}
}

my $responses_count = scalar keys %responses;
my $tags = join(' ',keys %responses);

if($errors){
	print "$errors Errors encountered whilst retrieving $opt_u from $hostname\n";
	exit $ERRORS{"CRITICAL"};
}elsif($responses_count > 1){
	print "$responses_count different release versions ($tags) deployed on $hostname servers\n";
	exit $ERRORS{"CRITICAL"};
}elsif($responses_count == 1){
	print "All $hostname servers running Tag: $tags\n";
	exit $ERRORS{"OK"};
}else{
	print "Unknown condition please investigate.\n";
	exit $ERRORS{"UNKNOWN"};
}


	



#!/usr/bin/perl
	
use strict;
use warnings;
#use Redis;
#use JSON::XS; 
use Time::Local;
use Data::Dumper;
use Getopt::Long;
use CGI;
use DBI;


############################################################################################
# Initialize Globals & call Main
#   

	my $INTERVAL = 300;
	my $DEBUG = 1;
	my $ALOGF;
	my $TEST = 1;
	my $parseLog = "";
	
	#my $redisKey="jetty.app-1";   #.apachelog.stats
	#my $redis = Redis->new (server => "localhost:6379"); #UTF8 || ", encoding=>undef)"
	my %hth = ();
	my %hthBench = ();
	my %hthSum = ();

	my $inception;
	my $totalParses;

	$SIG{'HUP'} = 'restartHUP';
	

	main();





############################################################################################
# main - GetOptions, call primary subs() 
#   
sub main {
	

	my $skip=0;

	my $result = GetOptions (
		'debug|d=s' => \$DEBUG,
		'interval|i=s' => \$INTERVAL,
		'skip|s' => \$skip,
		'parse|p=s' => \$parseLog
	);
	if (!$result) { Usage (); }
	Debug ("command options: [d=$DEBUG, interval=$INTERVAL, log=$parseLog.");

	if ($parseLog) {
		Debug ("Parsing log file $parseLog ....");
		if ($parseLog =~ /\.gz$/) {
			open($ALOGF, "gunzip -c $parseLog|") or die $!;
		}
		else {
			open($ALOGF, '<', $parseLog) or die $!;
		}

		if ($skip) {
			seek ($ALOGF, 0, 2);
			sleep 30;
		}
		parseAccessLog ();

	} else {
		Usage();
	}


	close($ALOGF);
	die "Why here?";
}

	




############################################################################################
# restartHUP - actions to perform when cron or user HUPs this program
#   
sub restartHUP {
	my ($signal) = @_;
	Debug ("Caught Interrupt: $signal.");

	close($ALOGF);
	open($ALOGF, '<', $parseLog) or die $!;
	parseAccessLog();

}





############################################################################################
# parseAccessLog


sub parseAccessLog {

	#---- INIT ----

	my $months = {Jan=>0,Feb=>1,Mar=>2,Apr=>3,May=>4,Jun=>5,Jul=>6,Aug=>7,Sep=>8,Oct=>9,Nov=>10,Dec=>11};
	Debug ("Month-Hash:  \n", Dumper($months));
	my ($line, $ip, $time, $req, $method, $urlBase, $htresp, $bytes, $ref, $agent, $dispatch, $latency);
	my ($pageType, $htrcfd);
	my ($day, $month, $year, $hours, $min, $sec);
	my $jsonText;
	#my ($numLines=0, $elapsed=0, $initial=0, $logLine=0, $eoff=0);
	my ($elapsed, $initial, $numLines);
	my $logLine = 0;
	my $eoff = 0;



	#---- LOOP ----

	while (1) {

	# Reset variables
	$elapsed=0;
	$initial = 0;
	$numLines=0;
	initHashes();

	Debug ("HTTP HASH of Arrays: \n", Dumper(%hth));

	while ($elapsed < $INTERVAL) {

		++$logLine;
		
		Debug ("Elapsed=[$elapsed], initial=[$initial]");

		if (!($line = <$ALOGF>)) { 
			$eoff = 1; 
			last; 
		}
		chomp $line;

		if ($line !~ /^\S+\s+.*\[/) {
			Debug (0, "ERROR line=[$line]");
			next;
		}	
	
		Debug ("Processing line=[$line]");

		($ip, $time, $req, $htresp, $bytes, $ref, $agent, $dispatch, $latency) = $line =~ 
                   /^(\S+)\s+.*\[(\S+)\s+\S+\]\s+"(.*)"\s+(\S+)\s+(\S+)\s+"(\S+)"\s+"(.*)"\s+(\d+)\s+(\d+)/;

		$req =~ s/%//g;   # strip encoded chars - didn't use "uri_unescape()" for search/debugging
		if (!(($method, $urlBase) = $req =~ /(\S+)\s+(\S{1,40})\S*\s+\S+/)) {   # don't need full URL- truncated at 40 chars
			Debug (3, "Heartbeat? req=[$req]");
			next;
		}

		$urlBase =~ s/%//g;
		Debug (5, "\t\tNextline=[$line]
			IP=[$ip]
			time=[$time]
			method=[$method]
			urlBase=[$urlBase]
			HT_resp=[$htresp]
			bytes=[$bytes]
			Referrer=[$ref]
			UserAgent=[$agent]
			dispatch=[$dispatch]
			latency=[$latency]");
		

		($day, $month, $year, $hours, $min, $sec, undef) = split /[:\/]/, $time;
		$time = timelocal($sec,$min,$hours,$day,$months->{$month},$year);

		if ($initial == 0) {
			$initial = $time; 
		}

		$elapsed = $time - $initial;
	
		if ( $method !~ /GET/ ) {   # spacing shows some play with groupings- this will change 
			$pageType = "_Other";
			Debug (4, "method: [urlBase=$urlBase, htresp=$htresp, logLine=$logLine]");

		} else {
			$pageType = &urlTypeMatch ($urlBase);
		}			


		Debug ("TYPE=$pageType [method=$method, urlBase=$urlBase, htresp=$htresp, logLine=$logLine]");

		$htrcfd = $htresp;   
		$htrcfd =~ s/(\d)\d\d/$1/;  # "HT return code first digit"
		$hth{$pageType}[$htrcfd]++;
		if  ($htrcfd == 2) {   # On successful 2xx returns, add response times (average below)
			$hth{$pageType}[0] += $latency;
		}

		Debug ("[htresp=$htresp, htrcfd=$htrcfd, url=$pageType, hth{pageType}[htrcfd]=$hth{$pageType}[$htrcfd].\n"); 
		$numLines++;

	}

	# only get here if elapsed >= $INTERVAL or EOF

	$hth{'Admin'}[1] = $time; # convenient place to store 'lastentry' 
	$hth{'_Other'}[1] = $INTERVAL;  # convenient place to store 'interval'
	for $pageType (sort keys %hth) {
		if ($hth{$pageType}[0]) { 
			# posn[0] hold load times; average them by dividing by page counts:  
			$hth{$pageType}[0] = int ($hth{$pageType}[0] / $hth{$pageType}[2]  + 0.5);
		}
	}
	Debug ("HTTP hash: \n", Dumper(%hth));

	#$jsonText = encode_json $hthRef;
	#Debug ("REDIS ENQUEUE [$jsonText]");
	#$redis->rpush ($redisKey, $jsonText) || Debug ("ERROR: enqueue failed\n");


	savePG();
	printHTML();
	if ($TEST) { 
		printTxtChart(); 
	} 

	if ($eoff) { 
		Debug (1, "...  Sleep ...\n"); 
		sleep $INTERVAL;
	}


	}
}





############################################################################################
# buildHeatMap

#sub buildHeatMap {
#
#	my $jsonText="";
#	while (1) {
#	
#		$jsonText = $redis->lpop ($redisKey) || Debug ("ERROR: lpop failed");
#		Debug ("Redis lpop: [$jsonText]");
#		if ($jsonText eq "") {
#			Debug ("Queue $redisKey empty.  Waiting data ...");
#			sleep 10;
#			next;
#		}
#		$hthRef  = decode_json $jsonText || Debug (0, "ERROR: decode failed\n");
#                %hth = %$hthRef;
#		sleep 5;  
#	}
#}






############################################################################################
# Debug()

sub Debug {
	my $cdbl = 9;
	if ($_[0] =~ /^\d$/) {    # Support both Debug (N, "Blah..") and Debug ("Blah")
		$cdbl = shift;
	}
	if ($DEBUG >= $cdbl) { 
		print "DEBUG: [@_]\n"; 
	}

}





############################################################################################
# urlTypeMatch()

sub urlTypeMatch {

	my $pageType="";
	my $urlBase = shift;

		#'admin/login' => 'Junk',  # this is the base URL for heartbeat check 
	my %jLogRegex = (
		'admin/(?!login)' => 'Admin',
		'customize|user' => 'Custom',
		'blog/look' => 'DP_Blog',
		'brand/look' => 'DP_Brand',
		'stores/look' => 'DP_Store',
		'feed/all' => 'Feed_All',
		'feed/blogs|blog/feed|blog\d' => 'Feed_Blog',
		'feed/brand|brand/\d' => 'Feed_Brand',
		'feed/stores|stores/\d' => 'Feed_Store',
		'mekka' => "General",
		'onboard' => 'Onboard',
		'search' => 'Search',
		'css|js|favicon|html|img' => 'Static'
	);


	for my $regex (keys %jLogRegex) {  # remove sort to preserve order (e.g. 'Junk' gets butchered by 'admin')
		if ($urlBase =~ m[^/($regex)]) {
			$pageType =  $jLogRegex{$regex};
			last;
		}
	}
	if (! $pageType) { 
		$pageType = "_Other";
		Debug (1, "OTHER:  [Urlbase=$urlBase]");
	}

	return $pageType;

}






############################################################################################
# savePG ()     # double-entendre on "PG" = save in Postgres db, and save Page to db

sub savePG {

	my ($i, $columns, $values, $cols_vals, $pageType);
	my ($dbInsert, $dbUpdate, $dbSelect, $rows);
	my $host = "localhost"; # QQQ -should be "chiburi"
	my $opw = "mekkamekka";
	my $dbh = DBI->connect("DBI:Pg:dbname=perf;host=$host", "postgres", $opw, {RaiseError => 1})
		|| die "$DBI::errstr";
	my $sth;
	my $table = "jps";
	my $rowSummaries = 1;  # keep summaries of all page hits, errors, in row 1
	my $rowAverages = 2;   # keep averages of all page hits, errors, in row 2


	# INSERT new row for lastest aggregated return codes and function calls (in %hth hash)
	my $interval = $hth{'_Other'}[1];
	my $lastentry = $hth{'Admin'}[1];
	$hth{'Admin'}[1] = 0;  # back to "unused" state for [1] array element
	$hth{'_Other'}[1] = 0;  # back to "unused" state for [1] array element

	$columns = "\ninterval,\nlastentry,\n";
	$values = "\n$interval,\nto_timestamp($lastentry),\n";
	for $pageType (sort keys %hth) {
		$columns .= "$pageType,\n";
		$values .= "'{".join (",", @{$hth{$pageType}})."}', \n";
	}
	$columns =~ s/,\s*$//;
	$values =~ s/,\s*$//;
	
	$dbInsert = "INSERT INTO $table ($columns) VALUES ($values)";
	Debug (1, "SQL: \n$dbInsert.");
	$rows = $dbh->do($dbInsert);
	Debug (1, "Rows affected: [$rows]");



	# SELECT row $rowSummaries into %hthSum 
	#$dbSelect = "SELECT interval, lastentry, Admin FROM $table WHERE id=$rowSummaries";
	$dbSelect = "SELECT
		interval,
		lastentry,
		Admin,
		Custom,
		DP_Blog,
		DP_Brand,
		DP_Store,
		Feed_All,
		Feed_Blog,
		Feed_Brand,
		Feed_Store,
		General,
		Onboard,
		Search,
		Static,
		_Other
		FROM $table
		WHERE id = $rowSummaries";

	Debug (1, "SQL: PREPARE: $dbSelect.");
	$sth = $dbh->prepare($dbSelect);
	Debug (1, "Result: [$sth]");
	$sth->execute();
	my $ref = $sth->fetchrow_hashref();   
	# NOTE:  must use lowercase for actual fetched column descriptors!
	%hthSum = (   
		Admin => $ref->{'admin'},
		Custom => $ref->{'custom'},
		DP_Blog => $ref->{'dp_blog'},
		DP_Brand => $ref->{'dp_brand'},
		DP_Store => $ref->{'dp_store'},
		Feed_All => $ref->{'feed_all'},
		Feed_Blog => $ref->{'feed_blog'}, 
		Feed_Brand => $ref->{'feed_brand'}, 
		Feed_Store => $ref->{'feed_store'}, 
		General => $ref->{'general'},
		Onboard => $ref->{'onboard'}, 
		Search => $ref->{'search'}, 
		Static => $ref->{'static'},
		_Other => $ref->{'_other'} 
	);
	$inception=$ref->{'lastentry'};  
	$totalParses=$ref->{'interval'}; # convenient place to store Total count of parsed result sets (needed for Bench calcs)
	Debug (1, "Result: ref=$ref. inception=$inception, totalParses=$totalParses, Admin=@{$hthSum{'Admin'}}.");
	$totalParses += 1;


	# ADD current counts to summary counts
	for $i (0,2,3,4,5) { 
		for $pageType (sort keys %hthSum) {
			$hthSum{$pageType}[$i] += $hth{$pageType}[$i];
		}
	}
	# UPDATE summary row 1 with new summaries
	$cols_vals = "interval = $totalParses,\n";
	for $pageType (sort keys %hthSum) { 
		$cols_vals .= "$pageType = ARRAY[".join (",", @{$hthSum{$pageType}})."], \n"; 
	}
	$cols_vals =~ s/,\s*$//;
	$dbUpdate = "UPDATE $table SET $cols_vals WHERE id=$rowSummaries";
	Debug (1, "SQL: \n$dbUpdate.");
	$rows = $dbh->do($dbUpdate);
	Debug (1, "Rows affected: [$rows]");

	for my $pT (sort keys %hthBench) {
		# Additive latencies don't make sense, even for summary table, so divide by hits.
		$hthBench{$pT}[0] = int ( ($hthSum{$pT}[0]/(1+$hthSum{$pT}[2])) + .5);
		$hthBench{$pT}[2] = int ( ($hthSum{$pT}[2] / $totalParses) + .5);
		$hthBench{$pT}[3] = int ( ($hthSum{$pT}[3] / $totalParses) + .5);
		$hthBench{$pT}[4] = int ( ($hthSum{$pT}[4] / $totalParses) + .5);
		$hthBench{$pT}[5] = int ( ($hthSum{$pT}[5] / $totalParses) + .5);
	}


	$dbh->disconnect();

}







############################################################################################
# getStyle()

sub getStyle {

	my $style = <<"EOF";
	body {
		font-family: verdana, arial, sans-serif;
		background-color: white;
		padding-left: 8%;
	}
	H1 {
		#color: darkgreen;
		color: darkblue;
		border-bottom: 2pt solid;
	}
	H2 {
		color: blue;
		border-bottom: 1pt solid;
	}
	H4 {
		color: darkblue;
	}
	p {
		font-variant: small-caps;
		font-weight: bold;
	}
	table {
		border: darkblue 1pt solid;
		
	}
	th, td {
		border: blue 1pt dashed;
		width: 125;
	}
	strong_positive {
		color: white;
		background-color: green;
		font-weight: bold;
	}
	mild_positive {
		#color: lightgreen;
		color: green;
		font-style: italic;
		font-weight: bold;
	}
	mild_alert {
		color: orange;
		font-style: italic;
		font-weight: bold;
	}
	strong_alert {
		color: white;
		background-color: red;
		font-weight: bold;
	}
EOF
	
	return $style;
}



############################################################################################
# getCell()

sub getCell {
	die "call:  getCell (<val>, <avg>, <rev>, <mult>)" if @_ != 4;
	my ($val, $avg, $reverse, $mult) = @_;

	$val *= $mult;  # Translate actual page hits & errors into hourly figures

	my $bigf = 4;
	my $lilf = 1.5;

	my $cell;

	if ($reverse) {    ## Keep this ordering ... it matters!

		if ($val == 0) {
			$cell = 0;
		} elsif ($val < ($avg / $bigf)) {
			$cell = "<strong_positive>".$val."</strong_positive>";
		} elsif ($val < ($avg / $lilf)) {
			$cell = "<mild_positive>".$val."</mild_positive>";
		} elsif ($val > ($avg * $bigf)) {
			$cell = "<strong_alert>".$val."</strong_alert>";
		} elsif ($val > ($avg * $lilf)) {
			$cell = "<mild_alert>".$val."</mild_alert>";
		} else {
			$cell = $val;
		}


	} else {  ## Keep this ordering ... it matters!

		if ($val == 0) {
			$cell = 0;
		} elsif ($val > ($avg * $bigf)) {
			$cell = "<strong_positive>".$val."</strong_positive>";
		} elsif ($val > ($avg * $lilf)) {
			$cell = "<mild_positive>".$val."</mild_positive>";
		} elsif ($val < ($avg / $bigf)) {
			$cell = "<strong_alert>".$val."</strong_alert>";
		} elsif ($val < ($avg / $lilf)) {
			$cell = "<mild_alert>".$val."</mild_alert>";
		} else {
			$cell = $val;
		}
	}

}


############################################################################################
# printHTML()

sub printHTML {

	open (HTFILE, '> /var/www/zabbix/heatmap.html') || die "cannot open heatmap.html";
	#open (HTFILE, '> /home/ubuntu/checkout/mekka/platz/src/main/resources/static/admin/html/perf/heatmap.html') || die "cannot open heatmap.html";

	#my $q = new CGI;
	my $style = getStyle();


	my @times = ("<strong>Latency(ms)</strong>");
	my @headings = ("<strong>Result(aggreg)</strong>");
	my @hits = ("<strong>PageHits</strong>");
	my @redirects = ("<strong>Redirect</strong>");
	my @clientFail = ("<strong>Browser Err</strong>");
	my @serverFail = ("<strong>Server Fail</strong>");

	my $val;
	my $valBench;
	my $pageType;
	my $cell;
	my $i;

	my $multFactor = 1; #later- int(3600/$INTERVAL), but keep simple now

	#print HTFILE CGI->header;
	print HTFILE CGI->start_html (
		-title => 'Ador Heatmap',
		-author => 'q@lockerz.com',
		-meta => { keywords => 'perl cgi heatmap test' },
		-style => {-code => $style},
	#	-style => {'src' => '/styles/sample.css'},
	);



	print HTFILE '<meta http-equiv="refresh" content="60">';

	print HTFILE CGI->h1 ("Ador Heatmap");
	for $i (0,1,2,3,4,5) { # return codes: <I>xx .  note 0=times for 2xx's, and 1=headings
		for $pageType (sort keys %hth) {
			$val = $hth{$pageType}[$i];
			$valBench = $hthBench{$pageType}[$i];
			if ($i == 0) {
				push (@times, getCell ($val, $valBench, 1, 1));
			} elsif ($i == 1) {
				push (@headings, sprintf("%12s", $pageType));
			} elsif ($i == 2) {
				push (@hits, getCell ($val, $valBench, 0, $multFactor));
			} elsif ($i == 3) {
				push (@redirects, getCell ($val, $valBench, 0, $multFactor));
			} elsif ($i == 4) {
				push (@clientFail, getCell ($val, $valBench, 1, $multFactor));
			} elsif ($i == 5) {
				push (@serverFail, getCell ($val, $valBench, 1, $multFactor));
			} else {
				Debug (0, "variable i=[$i] not understood.");
			}
		}
	}
	print HTFILE CGI->table(
		{-border => 1, -cellpadding => 4},
		CGI->Tr([
			CGI->th (\@headings), 
			CGI->td (\@times),
			CGI->td (\@hits),
			CGI->td (\@redirects),
			CGI->td (\@clientFail),
			CGI->td (\@serverFail),
		])
	);


	print HTFILE "<br><br>";
	print HTFILE CGI->h4 ("Map Annotation");
	print HTFILE CGI->ul ( CGI->li([
		"Hits, errors, times all over last $INTERVAL seconds",
		"Color indicators:",
		"<strong_positive>Strong Positive</strong_positive>", 
		"<mild_positive>Mild Positive</mild_positive>",
		"Normal",
		"<mild_alert>Mild Alert</mild_alert>",
		"<strong_alert>Strong Alert</strong_alert>"
	]));



	@times = ("<strong>Latency(ms)</strong>");
	@hits = ("<strong>PageHits</strong>");
	@redirects = ("<strong>Redirect</strong>");
	@clientFail = ("<strong>Browser Err</strong>");
	@serverFail = ("<strong>Server Fail</strong>");

	
	print HTFILE "<br><br>";
	print HTFILE CGI->h3 ("Totals since $inception.");
	for $i (0,2,3,4,5) { # return codes: <I>xx .  note 0=times for 2xx's, and 1=headings
		for $pageType (sort keys %hth) {
			$val = $hthSum{$pageType}[$i];
			if ($i == 0) {
				#push (@times, $val/$hthSum{$pageType}[2]); 
				push (@times, $val);
			} elsif ($i == 2) {
				push (@hits, $val);
			} elsif ($i == 3) {
				push (@redirects, $val);
			} elsif ($i == 4) {
				push (@clientFail, $val);
			} elsif ($i == 5) {
				push (@serverFail, $val);
			} else {
				Debug (0, "variable i=[$i] not understood.");
			}
		}
	}
			#CGI->td (\@times),   #additive latencies don't make sense (under "Totals since $inception")
	print HTFILE CGI->table(
		{-border => 1, -cellpadding => 4},
		CGI->Tr([
			CGI->th (\@headings), 
			CGI->td (\@hits),
			CGI->td (\@redirects),
			CGI->td (\@clientFail),
			CGI->td (\@serverFail),
		])
	);

	@times = ("<strong>Latency(ms)</strong>");
	@hits = ("<strong>PageHits</strong>");
	@redirects = ("<strong>Redirect</strong>");
	@clientFail = ("<strong>Browser Err</strong>");
	@serverFail = ("<strong>Server Fail</strong>");

	print HTFILE "<br><br>";
	print HTFILE CGI->h3 ("Benchmark [$totalParses]");
	for $i (0,2,3,4,5) { # return codes: <I>xx .  note 0=times for 2xx's, and 1=headings
		for $pageType (sort keys %hth) {
			$val = $hthBench{$pageType}[$i];
			if ($i == 0) {
				push (@times, $val); 
			} elsif ($i == 2) {
				push (@hits, $val);
			} elsif ($i == 3) {
				push (@redirects, $val);
			} elsif ($i == 4) {
				push (@clientFail, $val);
			} elsif ($i == 5) {
				push (@serverFail, $val);
			} else {
				Debug (0, "variable i=[$i] not understood.");
			}
		}
	}
	print HTFILE CGI->table(
		{-border => 1, -cellpadding => 4},
		CGI->Tr([
			CGI->th (\@headings), 
			CGI->td (\@times),
			CGI->td (\@hits),
			CGI->td (\@redirects),
			CGI->td (\@clientFail),
			CGI->td (\@serverFail),
		])
	);



	print HTFILE "<br><br>";
	print HTFILE CGI->h4 ("To-Dos");
	print HTFILE CGI->ul ( CGI->li([
		'daemonize & HUP/logfile re-kick',
		'dynamic refresh', 
		'Holt-Winters?',
		'Multiple app logs- indiv or aggreg display',
		'Mekka/Uber logs?', 
	]));
		#  DONE!
		#'Ador- jetty logs',
		#'Database save',
		#'Max/Min/Avg',


	print HTFILE CGI->end_html;
	close (HTFILE);
}







############################################################################################
# printTxtChart()

sub printTxtChart {

	my $i;
	my $val;
	my $pageType;
	my $htrcc="";  #HT return code category

	printf "%12s", "RESULTS";
	for $pageType (sort keys %hth) {
		printf "%11s", $pageType;
	}
	printf "\n";

	#Debug (0,"HTTP HASH of Arrays: \n", Dumper(%hth));

	foreach $i (0,2,3,4,5) { # RC digit starters- i.e. <d>xx (with 0==>page load times)
		my $htr = "$i"."xx";
		if ($i == 0) {
			$htr = "Time";
		}
		printf "%12s", $htr;

		for $pageType (sort keys %hth) {
			$val=$hth{$pageType}[$i];
			if ($val) {
				if ($i == 0) {
					printf "%9dms", $hth{$pageType}[$i];
				} else {
					printf "%11d", $hth{$pageType}[$i];
				}
			} else {
				printf "%11s", "";
			}
		}
		printf "\n";
		
	}
}


############################################################################################
# initHashes()

sub initHashes()  {
	my @e = (0,0,0,0,0,0);
	%hth = ( 
		Admin => [@e], 
		Custom => [@e], 
		DP_Blog => [@e],
		DP_Brand => [@e],
		DP_Store => [@e],
		Feed_All => [@e],
		Feed_Blog => [@e], 
		Feed_Brand => [@e], 
		Feed_Store => [@e], 
		General => [@e],
		Onboard => [@e], 
		Search => [@e], 
		Static => [@e],
		_Other => [@e] 
	);

	%hthSum = ( 
		Admin => [@e], 
		Custom => [@e], 
		DP_Blog => [@e],
		DP_Brand => [@e],
		DP_Store => [@e],
		Feed_All => [@e],
		Feed_Blog => [@e], 
		Feed_Brand => [@e], 
		Feed_Store => [@e], 
		General => [@e],
		Onboard => [@e], 
		Search => [@e], 
		Static => [@e],
		_Other => [@e] 
	);

	%hthBench = ( 
		#FILLER =>     [ <ms>, NA, Hits, 3XX, 4XX, 5XX],
		Admin =>       [  100,  0,    2,   0,   0,   0],
		Custom =>      [  100,  0,    2,   0,   0,   0],
		DP_Blog =>     [  100,  0,    2,   0,   0,   0],
		DP_Brand =>    [  100,  0,    2,   0,   0,   0],
		DP_Store =>    [  100,  0,    2,   0,   0,   0],
		Feed_All =>    [  100,  0,    2,   0,   0,   0],
		Feed_Blog =>   [  100,  0,    2,   0,   0,   0],
		Feed_Brand =>  [  100,  0,    2,   0,   0,   0],
		Feed_Store =>  [  100,  0,    2,   0,   0,   0],
		General =>     [  100,  0,    2,   0,   0,   0],
		Onboard =>     [  100,  0,    2,   0,   0,   0],
		Search =>      [  100,  0,    2,   0,   0,   0],
		Static =>      [  100,  0,    2,   0,   0,   0],
		_Other =>      [  100,  0,    2,   0,   0,   0],
	);


}






############################################################################################
# Usage()

sub Usage {

	my $usage = q{

              Usage: adorhmb [-i] [-d <debug>] -p <parse-file> 

              Usage: adorhmb [-d <debug>] -m <map-db> 

                    options:
                        --debug, -d <level>      # 0 = none, 9 = max detail
                        --interval, -i <n>       # measurement interval in seconds

	};

	die $usage;
}

